Objetivo:
Determinar el orden en que se deben visitar las sucursales bancarias para cumplir con las entregas o retiro de dinero pactados
(sin que la carga supere el importe definido ni sea negativa) de manera tal de minimizar el recorrido en el día.
Se deberá pasar por las 10 sucursales y volver a la sede de origen.

Hipotesis y supuestos:
- Las sucursales bancarias cuentan con el dinero necesario en caso de que se deba retirar.
- No hay un límite de horario para que el camión de causales pase por una sucursal.
- Se asume como período para realizar todas las entregas un día.

Resolución:
23-04-22: Impresion inicial del problema:
Por la descripción se puede decir que se trata de un problema de camino mínimo, en el que además se tiene que cumplir con
cierta demanda. Para resolverlo se podría probar por fuerza bruta, intentando generar todas las combinaciones posibles y
quedarse con la que presente el camino más corto.
Al ser 150 sucursales resulta un problema manejable, por lo que se procederá primeramente a intentar resolverlo con un
algoritmo custom para luego introducirle mejoras y poder apreciar la diferencia.

24-04-22: Se comienza parseando la información recibida en el archivo problema_uno.txt provisto por la cátedra. La estructura
para manejar los datos será la siguiente:
branch_offices = {“n sucursal”: demanda}. Ejemplo {“1”: 10, “2”: -5}
coordinates = {“1”: (x, y)}

25-04-22: Primero se comenzará resolviendo el problema con un algoritmo custom que consiste en tomar una sucursal (inicialmente
la 1) y calcular cuál es la más cercana en distancia. Si se puede cumplir con la demanda de la sucursal obtenida, se la toma
como candidata y se la elimina de la lista de sucursales a visitar. Así se repite el cálculo partiendo de la sucursal candidata
hasta que no quedan ciudades.
Esta forma requiere recorrer la lista reiteradas veces por lo que no tendrá una buena performance, pero al tener pocas sucursales
resulta computable.

